<?php

namespace App\Controls;

use App\Model\Game;
use App\Model\Structures\IGlobalSettings;
use Nette\Application\UI;
use Nette\UnexpectedValueException;

/**
 * Requires parent component to have handleOpen($id) methods
 * Class GameView
 * @package App\Controls
 */
class GameView extends UI\Control
{
	const
		TYPE_LARGE = 'large',
		TYPE_MINI = 'mini',
		TYPE_MODAL = 'modal';
	/** @var string */
	private $default_render;
	/** @var PictureView */
	private $picture_view_factory;

	/** @var IGlobalSettings */
	private $settings;

	public function __construct($default_render = self::TYPE_MINI,
								IPictureViewFactory $picture_view_factory,
								IGlobalSettings $settings)
	{
		parent::__construct();
		$this->default_render = $default_render;
		$this->picture_view_factory = $picture_view_factory;
		$this->settings = $settings;
	}

	public function renderLarge(Game $game)
	{
		$this->assignAndRender($game, $this->templateByType(self::TYPE_LARGE));
	}

	public function renderMini(Game $game)
	{
		$this->assignAndRender($game, $this->templateByType(self::TYPE_MINI));
	}

	public function renderModal(Game $game)
	{
		$this->assignAndRender($game, $this->templateByType(self::TYPE_MODAL));
	}

	public function render(Game $game)
	{
		$this->assignAndRender($game, $this->templateByType($this->default_render));
	}

	private function templateByType($type)
	{
		switch ($type) {
			case self::TYPE_MINI:
				return __DIR__ . '/gameMini.latte';
			case self::TYPE_LARGE:
				return __DIR__ . '/gameLarge.latte';
			case self::TYPE_MODAL:
				return __DIR__ . '/gameModal.latte';
		}
		throw new UnexpectedValueException("Render type $type was not recognised");
	}

	public function link($destination, $args = array())
	{
		return $this->presenter->link($destination, $args); // TODO: Change the autogenerated stub
	}

	public function createComponentPicture()
	{
		return $this->picture_view_factory->create('/images/games/', '/images/g404.png');
	}

	/**
	 * @param Game $game
	 * @param $file
	 */
	private function assignAndRender(Game $game, $file)
	{
		$this->template->game = $game;
		$this->template->max_rating = $this->settings->getMaxRating();

		$this->template->setFile($file);
		$this->template->render();
	}
}

interface IGameViewFactory
{
	/**
	 * @return GameView
	 */
	public function create($default_render = GameView::TYPE_MINI);
}
